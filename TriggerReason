export enum TriggerReasonEnumType {
  EVDetected = 'EVDetected',
  EVDisconnected = 'EVDisconnected', 
  EVIdle = 'EVIdle',
  EVCharging = 'EVCharging',
  EVEnded = 'EVEnded',
  Authorize = 'Authorize',
  RemoteStart = 'RemoteStart',
  RemoteStop = 'RemoteStop'
}

export enum StatusEnumType {
  Accepted = 'Accepted',
  Rejected = 'Rejected', 
  NotImplemented = 'NotImplemented'
}

interface TriggerReasonResponse {
  status: StatusEnumType;
  // Add any additional fields as needed
}

export async function TriggerReason(reason: TriggerReasonEnumType): Promise<TriggerReasonResponse> {
  switch (reason) {
    case TriggerReasonEnumType.Authorize:
      // Handle Authorize logic
      return { status: StatusEnumType.Accepted };
    case TriggerReasonEnumType.RemoteStart:
      // Handle RemoteStart logic
      return { status: StatusEnumType.Rejected };
    case TriggerReasonEnumType.RemoteStop:
      // Handle RemoteStop logic
      return { status: StatusEnumType.NotImplemented };
    default:
      // Handle other TriggerReasons or return a default value
      return { status: StatusEnumType.Accepted };
  }
}
