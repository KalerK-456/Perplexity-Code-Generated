public async handleTransactionEventResponse(headers: OCPPHeader, transactionEvent: TransactionEvent): Promise<OCPPTransactionEventResponse201> {
  try {
    // Extract header information
    const { chargingStation, tenant } = headers;

    // Validate the transaction event request
    OCPPValidator.getInstance().validateTransactionEvent(transactionEvent);

    // Process the transaction event
    const transactionInfo = transactionEvent.transactionInfo;
    const idToken = transactionEvent.idToken;
    const evse = transactionEvent.evse;
    const meterValues = transactionEvent.meterValue;

    // Perform necessary operations based on eventType
    switch (transactionEvent.eventType) {
      case OCPPTransactionEventEnumType.STARTED:
        // Handle transaction start logic
        await this.handleTransactionStarted(transactionEvent);
        break;
      case OCPPTransactionEventEnumType.UPDATED:
        // Handle transaction update logic
        await this.handleTransactionUpdated(transactionEvent);
        break;
      case OCPPTransactionEventEnumType.ENDED:
        // Handle transaction end logic
        await this.handleTransactionEnded(transactionEvent);
        break;
      default:
        throw new Error(`Unknown eventType: ${transactionEvent.eventType}`);
    }

    // Process MeterValues if present
    if (meterValues) {
      await this.processMeterValues(meterValues, transactionEvent.eventType);
    }

    // Log the transaction event
    await Logging.logInfo({
      ...LoggingHelper.getChargingStationProperties(chargingStation),
      tenantID: tenant.id,
      module: MODULE_NAME,
      method: 'handleTransactionEventResponse',
      action: ServerAction.OCPP_TRANSACTION_EVENT,
      message: `Transaction event processed for transaction ID '${transactionInfo.transactionId}'`,
      detailedMessages: { transactionEvent }
    });

    // Return response
    return {
      totalCost: 0, // Example value, replace with actual calculation
      chargingPriority: 1, // Example value, replace with actual priority
      idTokenInfo: {
        status: OCPPAuthorizationStatusEnumType.ACCEPTED
      }
    };
  } catch (error) {
    // Handle errors
    this.addChargingStationToException(error, headers.chargeBoxIdentity);
    await Logging.logActionExceptionMessage(headers.tenantID, ServerAction.OCPP_TRANSACTION_EVENT, error, { transactionEvent });

    // Return error response
    return {
      idTokenInfo: {
        status: OCPPAuthorizationStatusEnumType.INVALID
      }
    };
  }
}

private async processMeterValues(meterValues: OCPPMeterValueType[], eventType: OCPPTransactionEventEnumType): Promise<void> {
  for (const meterValue of meterValues) {
    // Process each meter value based on the event type
    switch (eventType) {
      case OCPPTransactionEventEnumType.STARTED:
        // Handle MeterValues for transaction start
        await this.handleMeterValuesForStart(meterValue);
        break;
      case OCPPTransactionEventEnumType.UPDATED:
        // Handle MeterValues for transaction update
        await this.handleMeterValuesForUpdate(meterValue);
        break;
      case OCPPTransactionEventEnumType.ENDED:
        // Handle MeterValues for transaction end
        await this.handleMeterValuesForEnd(meterValue);
        break;
    }
  }
}

private async handleMeterValuesForStart(meterValue: OCPPMeterValueType): Promise<void> {
  // Implement logic for handling MeterValues at the start of a transaction
  // Process SampledDataTxStartedMeasurands
  for (const sampledValue of meterValue.sampledValue) {
    // Process each sampled value
    // Example: Store the initial meter values, calculate energy consumption, etc.
    console.log(`Processing started meter value: ${sampledValue.value}`);
  }
}

private async handleMeterValuesForUpdate(meterValue: OCPPMeterValueType): Promise<void> {
  // Implement logic for handling MeterValues during a transaction update
  // Process SampledDataTxUpdatedMeasurands
  for (const sampledValue of meterValue.sampledValue) {
    // Process each sampled value
    // Example: Update energy consumption calculations, check for billing periods, etc.
    console.log(`Processing updated meter value: ${sampledValue.value}`);
  }
}

private async handleMeterValuesForEnd(meterValue: OCPPMeterValueType): Promise<void> {
  // Implement logic for handling MeterValues at the end of a transaction
  // Process SampledDataTxEndedMeasurands and AlignedDataTxEndedMeasurands
  for (const sampledValue of meterValue.sampledValue) {
    // Process each sampled value
    // Example: Finalize energy consumption calculations, generate billing information, update transaction records, etc.
    console.log(`Processing ended meter value: ${sampledValue.value}`);
  }
}
