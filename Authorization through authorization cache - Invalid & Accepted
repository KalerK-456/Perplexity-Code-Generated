// Import necessary modules and types
import { WebSocket } from 'ws';
import { AuthorizeRequest, AuthorizeResponse, IdTokenInfoStatus, TransactionEventRequest, TransactionEventResponse } from 'ocpp-2.0.1-types';

// Configuration and memory state
const authCacheEnabled = true;
const localPreAuthorize = true;
const disablePostAuthorize = false;
const invalidIdToken = 'invalid_id_token';
const validIdTokenType = 'RFID';

// WebSocket connection to CSMS
const ws = new WebSocket('ws://csms.example.com');

// Function to send AuthorizeRequest
function sendAuthorizeRequest(idToken: string, tokenType: string): Promise<AuthorizeResponse> {
  return new Promise((resolve, reject) => {
    const request: AuthorizeRequest = {
      idToken: {
        idToken,
        type: tokenType
      }
    };

    ws.send(JSON.stringify(request), (err) => {
      if (err) {
        reject(err);
      }
    });

    ws.on('message', (data) => {
      const response: AuthorizeResponse = JSON.parse(data.toString());
      resolve(response);
    });
  });
}

// Function to handle the test scenario
async function testAuthorizationCache() {
  if (authCacheEnabled && localPreAuthorize && !disablePostAuthorize) {
    try {
      // Step 1: Present Invalid idToken which is already configured in the Authorization Cache
      const authorizeResponse = await sendAuthorizeRequest(invalidIdToken, validIdTokenType);

      // Validate the response
      if (authorizeResponse.idTokenInfo.status === IdTokenInfoStatus.Accepted) {
        console.log('Authorization accepted by CSMS for an invalid idToken in cache.');
        
        // Step 2: Send TransactionEventRequest
        const transactionEventRequest: TransactionEventRequest = {
          eventType: 'Started',
          triggerReason: 'Authorized',
          idToken: {
            idToken: invalidIdToken,
            type: validIdTokenType
          },
          offline: true
        };

        ws.send(JSON.stringify(transactionEventRequest), (err) => {
          if (err) {
            console.error('Failed to send TransactionEventRequest:', err);
          }
        });

        ws.on('message', (data) => {
          const transactionEventResponse: TransactionEventResponse = JSON.parse(data.toString());
          console.log('TransactionEventResponse received:', transactionEventResponse);
        });
      } else {
        console.error('Authorization failed for an invalid idToken in cache.');
      }
    } catch (error) {
      console.error('Error during authorization process:', error);
    }
  } else {
    console.error('Authorization cache is not enabled or pre-authorization is not configured correctly.');
  }
}

// Start the test scenario
ws.on('open', () => {
  console.log('WebSocket connection established.');
  testAuthorizationCache();
});

ws.on('error', (error) => {
  console.error('WebSocket error:', error);
});
